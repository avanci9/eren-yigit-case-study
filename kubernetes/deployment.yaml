apiVersion: apps/v1
kind: Deployment
metadata:
  name: simple-nodejs-app-${COLOR}
  labels:
    app: simple-nodejs-app
    color: ${COLOR}
    version: "${VERSION}"
  annotations:
    kubernetes.io/description: "Simple nodejs application deployment"
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: simple-nodejs-app
      color: ${COLOR}
  template:
    metadata:
      labels:
        app: simple-nodejs-app
        color: ${COLOR}
        version: "${VERSION}"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      terminationGracePeriodSeconds: 30
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: simple-nodejs-app
        image: ${IMAGE_NAME}:${IMAGE_TAG}
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
        env:
        - name: COLOR
          value: "${COLOR}"
        - name: VERSION
          value: "${VERSION}"
        - name: APP_ENV
          valueFrom:
            configMapKeyRef:
              name: simple-nodejs-app-config
              key: APP_ENV
              optional: true
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: simple-nodejs-app-config
              key: LOG_LEVEL
              optional: true
        - name: ENABLE_METRICS
          valueFrom:
            configMapKeyRef:
              name: simple-nodejs-app-config
              key: ENABLE_METRICS
              optional: true
        ports:
        - containerPort: 3000
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 15
          periodSeconds: 20
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 2
          failureThreshold: 3
          successThreshold: 1